---

  name: CI
  
  on:  # 
    push:
      branches:
        - master
        - qa
        - tst
        - dev
    pull_request:
      branches:
        - master
        - qa
        - tst
        - dev
  
    workflow_dispatch: ~
  
  jobs:
    DeploySnowflake:
      runs-on: ubuntu-latest
      container:
        image: ubuntu:latest
      steps:
        - uses: actions/checkout@v4
        - name: Set up Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.x'
        - name: Install dependencies
          run: |
              # Install Snowflake CLI using requirements.txt
              python -m pip install --disable-pip-version-check -r requirements.txt
              # apt update -y
              # apt install pipx -y
              # pipx ensurepath --global # optional to allow pipx actions with --global argument
              # pipx ensurepath
              # pipx install snowflake-cli
              # pipx ensurepath
              # cat ~/.bashrc
              # which snow
              # snow --help
              # pip IS installed:
              # which pip 
              # python -m pip install --upgrade pip
              # pip install -r requirements.txt
  
        - name: Verify Snowflake CLI
          run: snow --version

        # DEV branch build
        - name: Execute Snowflake CLI command
            echo ********** Building to DEV account from ${{ github.ref_name }} branch **********
          if: ${{ github.ref_name == 'DEV' }}
          env:
            SNOWFLAKE_CONNECTIONS_ACCOUNT_DEV: ${{ secrets.SNOWFLAKE_CONNECTIONS_ACCOUNT_DEV }}
            SNOWFLAKE_CONNECTIONS_USER: ${{ secrets.SNOWFLAKE_CONNECTIONS_USER }}
            SNOWFLAKE_CONNECTION_PASSWORDS: ${{ secrets.SNOWFLAKE_CONNECTION_PASSWORDS }}
            SNOWFLAKE_CONNECTIONS_ROLES: ${{ secrets.SNOWFLAKE_CONNECTIONS_ROLES }}
            SNOWFLAKE_CONNECTIONS_WAREHOUSE: ${{ secrets.SNOWFLAKE_CONNECTIONS_WAREHOUSE }}
            SNOWFLAKE_CONNECTIONS_DATABASE: ${{ secrets.SNOWFLAKE_CONNECTIONS_DATABASE }}
            SNOWFLAKE_CONNECTIONS_SCHEMA: ${{ secrets.SNOWFLAKE_CONNECTIONS_SCHEMA }}
            PRIVATE_KEY_PASSPHRASE: ${{ secrets.Passphrase }} #Passphrase is only necessary if private key is encrypted.
          run: 
            snow sql -q "ALTER GIT REPOSITORY SNOWFLAKE_GIT_REPO FETCH" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_DEV --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA;

            snow sql -q "EXECUTE IMMEDIATE FROM @SNOWFLAKE_GIT_REPO/branches/dev/apps/sf_deploy_dev.sql" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_DEV --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA;

            
        # QA branch build
        - name: Execute Snowflake CLI command
            echo ********** Building to QA account from ${{ github.ref_name }} branch **********
          if: ${{ github.ref_name == 'QA' }}
          env:
            SNOWFLAKE_CONNECTIONS_ACCOUNT_QA: ${{ secrets.SNOWFLAKE_CONNECTIONS_ACCOUNT_QA }}
            SNOWFLAKE_CONNECTIONS_USER: ${{ secrets.SNOWFLAKE_CONNECTIONS_USER }}
            SNOWFLAKE_CONNECTION_PASSWORDS: ${{ secrets.SNOWFLAKE_CONNECTION_PASSWORDS }}
            SNOWFLAKE_CONNECTIONS_ROLES: ${{ secrets.SNOWFLAKE_CONNECTIONS_ROLES }}
            SNOWFLAKE_CONNECTIONS_WAREHOUSE: ${{ secrets.SNOWFLAKE_CONNECTIONS_WAREHOUSE }}
            SNOWFLAKE_CONNECTIONS_DATABASE: ${{ secrets.SNOWFLAKE_CONNECTIONS_DATABASE }}
            SNOWFLAKE_CONNECTIONS_SCHEMA: ${{ secrets.SNOWFLAKE_CONNECTIONS_SCHEMA }}
            PRIVATE_KEY_PASSPHRASE: ${{ secrets.Passphrase }} #Passphrase is only necessary if private key is encrypted.
          run: 
            snow sql -q "ALTER GIT REPOSITORY SNOWFLAKE_GIT_REPO FETCH" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_QA --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA;

            snow sql -q "EXECUTE IMMEDIATE FROM @SNOWFLAKE_GIT_REPO/branches/qa/apps/sf_deploy_qa.sql" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_QA --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA; 

            
        # TST branch build
        - name: Execute Snowflake CLI command
            echo ********** Building to TST account from ${{ github.ref_name }} branch **********
          if: ${{ github.ref_name == 'TST' }}
          env:
            SNOWFLAKE_CONNECTIONS_ACCOUNT_TST: ${{ secrets.SNOWFLAKE_CONNECTIONS_ACCOUNT_TST }}
            SNOWFLAKE_CONNECTIONS_USER: ${{ secrets.SNOWFLAKE_CONNECTIONS_USER }}
            SNOWFLAKE_CONNECTION_PASSWORDS: ${{ secrets.SNOWFLAKE_CONNECTION_PASSWORDS }}
            SNOWFLAKE_CONNECTIONS_ROLES: ${{ secrets.SNOWFLAKE_CONNECTIONS_ROLES }}
            SNOWFLAKE_CONNECTIONS_WAREHOUSE: ${{ secrets.SNOWFLAKE_CONNECTIONS_WAREHOUSE }}
            SNOWFLAKE_CONNECTIONS_DATABASE: ${{ secrets.SNOWFLAKE_CONNECTIONS_DATABASE }}
            SNOWFLAKE_CONNECTIONS_SCHEMA: ${{ secrets.SNOWFLAKE_CONNECTIONS_SCHEMA }}
            PRIVATE_KEY_PASSPHRASE: ${{ secrets.Passphrase }} #Passphrase is only necessary if private key is encrypted.
          run: 
            snow sql -q "ALTER GIT REPOSITORY SNOWFLAKE_GIT_REPO FETCH" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_TST --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA;

            snow sql -q "EXECUTE IMMEDIATE FROM @SNOWFLAKE_GIT_REPO/branches/tst/apps/adm_control/snowflake_objects/databases/adm_control_db/schemas/tagging.sql" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_TST --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA; 


          # MASTER (prod) branch build
        - name: Execute Snowflake CLI command
            echo ********** Building to PRD account from ${{ github.ref_name }} branch **********
          if: ${{ github.ref_name == 'MASTER' }}
          env:
            SNOWFLAKE_CONNECTIONS_ACCOUNT_PRD: ${{ secrets.SNOWFLAKE_CONNECTIONS_ACCOUNT_PRD }}
            SNOWFLAKE_CONNECTIONS_USER: ${{ secrets.SNOWFLAKE_CONNECTIONS_USER }}
            SNOWFLAKE_CONNECTION_PASSWORDS: ${{ secrets.SNOWFLAKE_CONNECTION_PASSWORDS }}
            SNOWFLAKE_CONNECTIONS_ROLES: ${{ secrets.SNOWFLAKE_CONNECTIONS_ROLES }}
            SNOWFLAKE_CONNECTIONS_WAREHOUSE: ${{ secrets.SNOWFLAKE_CONNECTIONS_WAREHOUSE }}
            SNOWFLAKE_CONNECTIONS_DATABASE: ${{ secrets.SNOWFLAKE_CONNECTIONS_DATABASE }}
            SNOWFLAKE_CONNECTIONS_SCHEMA: ${{ secrets.SNOWFLAKE_CONNECTIONS_SCHEMA }}
            PRIVATE_KEY_PASSPHRASE: ${{ secrets.Passphrase }} #Passphrase is only necessary if private key is encrypted.
          run: 
            snow sql -q "ALTER GIT REPOSITORY SNOWFLAKE_GIT_REPO FETCH" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_PRD --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA;
            snow sql -q "EXECUTE IMMEDIATE FROM @SNOWFLAKE_GIT_REPO/branches/master/apps/sf_deploy_prd.sql" --temporary-connection --account $SNOWFLAKE_CONNECTIONS_ACCOUNT_PRD --user $SNOWFLAKE_CONNECTIONS_USER --password $SNOWFLAKE_CONNECTION_PASSWORDS --role $SNOWFLAKE_CONNECTIONS_ROLES --warehouse $SNOWFLAKE_CONNECTIONS_WAREHOUSE --database $SNOWFLAKE_CONNECTIONS_DATABASE --schema $SNOWFLAKE_CONNECTIONS_SCHEMA; 
